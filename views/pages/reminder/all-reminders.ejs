<!DOCTYPE html>
<html lang="en">
<head>
    <title>Timely Reminders - MediTrack</title>
    <%- include('../../partials/_header') %>
    <%- include('../../partials/_styles') %>
    <style>
        /* Container for the form */
        .form-container {
            background: rgba(255, 255, 255, 0.9);
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            max-width: 1200px;
            width: 100%;
            margin: 0 auto;
        }

        /* h1 inside .form-container */
        .form-container h1 {
            font-size: 2rem;
            margin-bottom: 25px;
            text-align: center;
            color: #333;
        }

        /* Header container for h1 and button */
        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        /* Table styling */
        .reminders-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 1em;
        }

        .reminders-table th,
        .reminders-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .reminders-table th {
            background: #f5f5f5;
            font-weight: bold;
            color: #444;
            cursor: pointer;
            user-select: none;
        }

        .reminders-table th:hover {
            background: #e9ecef;
        }

        /* Default sort indicator */
        .reminders-table th::after {
            content: ' ↕'; /* Neutral sort icon */
            font-size: 0.9rem;
            color: #888;
            margin-left: 5px;
        }

        /* Sorted column indicators */
        .reminders-table th.sort-asc::after {
            content: ' ↑';
            color: #333;
        }

        .reminders-table th.sort-desc::after {
            content: ' ↓';
            color: #333;
        }

        /* No sort indicator for Action column */
        .reminders-table th:last-child::after {
            content: '';
        }

        .reminders-table td {
            background: #fafafa;
        }

        /* Inputs and textarea in table */
        .reminders-table input,
        .reminders-table textarea {
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ccc;
            font-size: 1em;
            width: 100%;
            box-sizing: border-box;
        }

        .reminders-table textarea {
            resize: vertical;
            min-height: 50px;
        }

        /* Disabled state */
        .reminders-table input:disabled,
        .reminders-table textarea:disabled {
            background: #e9ecef;
            color: #666;
            border: none;
        }

        /* Buttons */
        .reminders-table .edit-btn,
        .reminders-table .save-btn,
        .reminders-table .delete-btn,
        .add-reminder-btn {
            background: #3498db;
            color: white;
            padding: 6px 12px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em;
            transition: background 0.3s ease;
            margin-right: 5px;
        }

        .add-reminder-btn:hover {
            background: #2980b9;
        }

        .reminders-table .save-btn {
            background: #2ecc71;
            display: none;
        }

        .reminders-table .delete-btn {
            background: #e74c3c;
        }

        .reminders-table .edit-btn:hover {
            background: #2980b9;
        }

        .reminders-table .save-btn:hover {
            background: #27ae60;
        }

        .reminders-table .delete-btn:hover {
            background: #c0392b;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .reminders-table {
                font-size: 0.9em;
            }

            .reminders-table th,
            .reminders-table td {
                padding: 8px;
            }

            .header-container {
                flex-direction: column;
                gap: 10px;
            }
        }

        /* Error message */
        .error-message {
            color: #e74c3c;
            text-align: center;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <%- include('../../partials/_sidebar') %>
    

    <!-- Main Content -->
    <div class="main-content">
        <div class="form-container">
            <div class="header-container">
                <h1>Timely Reminders</h1>
                <button class="add-reminder-btn" onclick="window.location.href='/add-reminder'">Add Reminder</button>
            </div>
            <% if (typeof error !== 'undefined' && error) { %>
                <p class="error-message"><%= error %></p>
            <% } %>
            <div style="margin-bottom: 20px;">
                <input type="text" id="searchInput" placeholder="Search by title..." style="width: 100%; padding: 10px; font-size: 1rem; border-radius: 5px; border: 1px solid #ddd;">
            </div>
            <table class="reminders-table" id="remindersTable">
                <thead>
                    <tr>
                        <th onclick="sortTable(0)">Title</th>
                        <th onclick="sortTable(1)">Description</th>
                        <th onclick="sortTable(2)">Date & Time</th>
                        <th onclick="sortTable(3)">Completed</th>
                        <th>Action</th> <!-- No sorting for Action -->
                    </tr>
                </thead>
                <tbody id="remindersBody">
                    <% if (reminders && reminders.length > 0) { %>
                        <% reminders.forEach(reminder => { %>
                            <tr data-id="<%= reminder.reminderId %>">
                                <td>
                                    <input type="text" id="title-<%= reminder.reminderId %>" value="<%= reminder.title %>" disabled required />
                                </td>
                                <td>
                                    <textarea id="description-<%= reminder.reminderId %>" disabled><%= reminder.description %></textarea>
                                </td>
                                <td>
                                    <input type="datetime-local" id="datetime-<%= reminder.reminderId %>" value="<%= reminder.datetime %>" disabled required />
                                </td>
                                <td>
                                    <input type="checkbox" id="completed-<%= reminder.reminderId %>" <%= reminder.completed ? 'checked' : '' %> disabled />
                                </td>
                                <td>
                                    <button class="edit-btn" data-id="<%= reminder.reminderId %>">Edit</button>
                                    <button class="save-btn" data-id="<%= reminder.reminderId %>">Save</button>
                                    <button class="delete-btn" data-id="<%= reminder.reminderId %>">Delete</button>
                                </td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr>
                            <td colspan="5" style="text-align: center;">No reminders found.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Pass initial reminders data from EJS to JavaScript
        let remindersData = <%- JSON.stringify(reminders || []) %>;
        let currentDisplayData = [...remindersData]; // Tracks filtered or full data

        // Track current sort column and direction
        let sortColumn = -1;
        let sortDirection = 1; // 1 for ascending, -1 for descending

        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function() {
            const query = this.value.toLowerCase();
            currentDisplayData = remindersData.filter(reminder =>
                reminder.title.toLowerCase().includes(query)
            );
            renderFilteredData(currentDisplayData);
        });

        function sortTable(columnIndex) {
            // Toggle sort direction if clicking the same column, otherwise reset to ascending
            if (sortColumn === columnIndex) {
                sortDirection *= -1;
            } else {
                sortDirection = 1;
            }
            sortColumn = columnIndex;

            // Sort the current display data
            currentDisplayData.sort((a, b) => {
                let aValue, bValue;
                switch (columnIndex) {
                    case 0: // Title
                        aValue = a.title || '';
                        bValue = b.title || '';
                        break;
                    case 1: // Description
                        aValue = a.description || '';
                        bValue = b.description || '';
                        break;
                    case 2: // Date & Time
                        aValue = a.datetime ? new Date(a.datetime).getTime() : -Infinity;
                        bValue = b.datetime ? new Date(b.datetime).getTime() : -Infinity;
                        break;
                    case 3: // Completed
                        aValue = a.completed ? 1 : 0;
                        bValue = b.completed ? 1 : 0;
                        break;
                    default:
                        return 0;
                }
                if (aValue < bValue) return -1 * sortDirection;
                if (aValue > bValue) return 1 * sortDirection;
                return 0;
            });

            // Update the table body
            renderFilteredData(currentDisplayData);

            // Update sort indicators
            updateSortIndicators(columnIndex);
        }

        function renderFilteredData(filteredData) {
            const tbody = document.getElementById('remindersBody');
            tbody.innerHTML = ''; // Clear existing rows

            if (filteredData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" style="text-align: center;">No reminders found.</td></tr>';
                return;
            }

            filteredData.forEach(reminder => {
                const row = document.createElement('tr');
                row.dataset.id = reminder.reminderId;
                row.innerHTML = `
                    <td><input type="text" id="title-${reminder.reminderId}" value="${reminder.title}" disabled required /></td>
                    <td><textarea id="description-${reminder.reminderId}" disabled>${reminder.description}</textarea></td>
                    <td><input type="datetime-local" id="datetime-${reminder.reminderId}" value="${reminder.datetime}" disabled required /></td>
                    <td><input type="checkbox" id="completed-${reminder.reminderId}" ${reminder.completed ? 'checked' : ''} disabled /></td>
                    <td>
                        <button class="edit-btn" data-id="${reminder.reminderId}">Edit</button>
                        <button class="save-btn" data-id="${reminder.reminderId}">Save</button>
                        <button class="delete-btn" data-id="${reminder.reminderId}">Delete</button>
                    </td>
                `;
                tbody.appendChild(row);
            });

            // Reattach event listeners after rendering
            attachEventListeners();
        }

        function updateSortIndicators(columnIndex) {
            const headers = document.querySelectorAll('#remindersTable th');
            headers.forEach((th, index) => {
                th.classList.remove('sort-asc', 'sort-desc');
                if (index === columnIndex) {
                    th.classList.add(sortDirection === 1 ? 'sort-asc' : 'sort-desc');
                }
            });
        }

        function attachEventListeners() {
            // Edit button logic
            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const id = e.target.dataset.id;
                    const row = e.target.closest('tr');
                    const inputs = row.querySelectorAll('input, textarea');
                    const saveBtn = row.querySelector('.save-btn');
                    inputs.forEach(input => input.disabled = false);
                    e.target.style.display = 'none';
                    saveBtn.style.display = 'inline-block';
                });
            });

            // Save button logic
            document.querySelectorAll('.save-btn').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const id = e.target.dataset.id;
                    const row = e.target.closest('tr');
                    const title = row.querySelector(`#title-${id}`).value.trim();
                    const description = row.querySelector(`#description-${id}`).value.trim();
                    const datetime = row.querySelector(`#datetime-${id}`).value;
                    const completed = row.querySelector(`#completed-${id}`).checked;

                    // Validation
                    if (!title || !datetime) {
                        alert('Title and Date & Time are required.');
                        return;
                    }

                    try {
                        const response = await fetch(`/reminders/${id}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ userId: '<%= userId %>', title, description, datetime, completed })
                        });

                        if (response.ok) {
                            const inputs = row.querySelectorAll('input, textarea');
                            const editBtn = row.querySelector('.edit-btn');
                            inputs.forEach(input => input.disabled = true);
                            e.target.style.display = 'none';
                            editBtn.style.display = 'inline-block';
                            // Update remindersData with new values
                            const reminderIndex = remindersData.findIndex(r => r.reminderId === id);
                            remindersData[reminderIndex] = { reminderId: id, title, description, datetime, completed };
                            currentDisplayData = remindersData.filter(r => r.title.toLowerCase().includes(document.getElementById('searchInput').value.toLowerCase()));
                            renderFilteredData(currentDisplayData);
                            alert('Reminder updated successfully!');
                        } else {
                            const errorText = await response.text();
                            alert('Failed to update reminder: ' + errorText);
                        }
                    } catch (error) {
                        console.error('Error updating reminder:', error);
                        alert('An error occurred. Please try again.');
                    }
                });
            });

            // Delete button logic
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const id = e.target.dataset.id;
                    const row = e.target.closest('tr');

                    if (confirm('Are you sure you want to delete this reminder?')) {
                        try {
                            const response = await fetch(`/reminders/${id}`, {
                                method: 'DELETE',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ userId: '<%= userId %>' })
                            });

                            if (response.ok) {
                                remindersData = remindersData.filter(r => r.reminderId !== id); // Remove from data
                                currentDisplayData = remindersData.filter(r => r.title.toLowerCase().includes(document.getElementById('searchInput').value.toLowerCase()));
                                renderFilteredData(currentDisplayData); // Update table
                                alert('Reminder deleted successfully!');
                            } else {
                                const errorText = await response.text();
                                alert('Failed to delete reminder: ' + errorText);
                            }
                        } catch (error) {
                            console.error('Error deleting reminder:', error);
                            alert('An error occurred. Please try again.');
                        }
                    }
                });
            });
        }

        // Initially render full table content
        renderFilteredData(remindersData);

        // Initial call to attach event listeners
        attachEventListeners();
    </script>
    <%- include('../../partials/_scripts') %>
</body>
</html>