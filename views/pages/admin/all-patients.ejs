<!DOCTYPE html>
<html lang="en">

<head>
    <title>All Patients - MediTrack</title>
    <%- include('../../partials/_header') %>
    <%- include('../../partials/_styles') %>
    <style>
        .form-container {
            background: rgba(255, 255, 255, 0.9);
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            max-width: 900px;
            width: 100%;
            margin: 0 auto;
        }

        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .search-container {
            flex: 1;
            min-width: 0;
        }

        .search-container input {
            width: 100%;
            max-width: 300px;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 20px;
            font-size: 1em;
            outline: none;
        }

        .search-container input:focus {
            border-color: #3498db;
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);
        }

        .form-container h1 {
            font-size: 2rem;
            margin: 0;
            text-align: center;
            color: #333;
            flex: 1; /* Centers the title within its flex space */
        }

        .add-patient-container {
            flex: 1;
            display: flex;
            justify-content: flex-end; /* Keeps button on the right */
        }

        .table-container {
            max-height: 500px; /* Fixed height for vertical scrolling */
            overflow-y: auto; /* Enables vertical scrollbar */
            margin-bottom: 20px;
        }

        .patients-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 1em;
        }

        .patients-table th,
        .patients-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .patients-table th {
            background: #f5f5f5;
            font-weight: bold;
            color: #444;
            cursor: pointer;
            user-select: none;
            position: sticky;
            top: 0;
            z-index: 1;
        }

        .patients-table th:hover {
            background: #e9ecef;
        }

        .patients-table th::after {
            content: ' ↕';
            font-size: 0.9rem;
            color: #888;
            margin-left: 5px;
        }

        .patients-table th.sort-asc::after {
            content: ' ↑';
            color: #333;
        }

        .patients-table th.sort-desc::after {
            content: ' ↓';
            color: #333;
        }

        .patients-table th:last-child::after {
            content: '';
        }

        .patients-table td {
            background: #fafafa;
        }

        .patients-table input {
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ccc;
            font-size: 1em;
            width: 100%;
            box-sizing: border-box;
        }

        .patients-table input:disabled {
            background: #e9ecef;
            color: #666;
            border: none;
        }

        .patients-table .edit-btn,
        .patients-table .save-btn,
        .patients-table .delete-btn,
        .add-patient-btn {
            background: #3498db;
            color: white;
            padding: 6px 12px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em;
            transition: background 0.3s ease;
            margin-right: 5px;
        }

        .add-patient-btn:hover {
            background: #2980b9;
        }

        .patients-table .save-btn {
            background: #2ecc71;
            display: none;
        }

        .patients-table .delete-btn {
            background: #e74c3c;
        }

        .patients-table .edit-btn:hover {
            background: #2980b9;
        }

        .patients-table .save-btn:hover {
            background: #27ae60;
        }

        .patients-table .delete-btn:hover {
            background: #c0392b;
        }

        .pagination {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
        }

        .pagination button {
            padding: 8px 16px;
            border: 1px solid #ddd;
            background: #f8f9fa;
            cursor: pointer;
            border-radius: 4px;
        }

        .pagination button:disabled {
            background: #e9ecef;
            cursor: not-allowed;
        }

        .pagination span {
            padding: 8px;
            align-self: center;
        }

        .error-message {
            color: #e74c3c;
            text-align: center;
            margin-bottom: 20px;
        }

        @media (max-width: 768px) {
            .patients-table {
                font-size: 0.9em;
            }

            .patients-table th,
            .patients-table td {
                padding: 8px;
            }

            .header-container {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }

            .search-container input {
                max-width: 100%;
            }

            .form-container h1 {
                margin: 0 0 10px 0;
            }

            .add-patient-container {
                justify-content: flex-start;
                width: 100%;
            }
        }
    </style>
</head>

<body>
    <%- include('../../partials/_sidebar') %>

    <div class="main-content">
        <div class="form-container">
            <div class="header-container">
                <div class="search-container">
                    <input type="text" id="searchInput" placeholder="Search patients..." onkeyup="searchPatients()">
                </div>
                <h1>All Patients</h1>
                <div class="add-patient-container">
                    <button class="add-patient-btn" onclick="window.location.href='/add-patient'">Add Patient</button>
                </div>
            </div>
            <% if (typeof error !== 'undefined' && error) { %>
            <p class="error-message"><%= error %></p>
            <% } %>
            <div class="table-container">
                <table class="patients-table" id="patientsTable">
                    <thead>
                        <tr>
                            <th onclick="sortTable(0)">Name</th>
                            <th onclick="sortTable(1)">Email</th>
                            <th onclick="sortTable(2)">Phone</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="patientsBody">
                        <!-- Populated by JavaScript -->
                    </tbody>
                </table>
            </div>
            <div class="pagination">
                <button onclick="changePage(-1)" id="prevBtn">Previous</button>
                <span id="pageInfo"></span>
                <button onclick="changePage(1)" id="nextBtn">Next</button>
            </div>
        </div>
    </div>

    <script>
        let patientsData = <%- JSON.stringify(patients || []) %>;
        let originalPatients = [...patientsData];
        const ITEMS_PER_PAGE = 10;
        let currentPage = 1;
        let sortColumn = -1;
        let sortDirection = 1;

        function searchPatients() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            patientsData = originalPatients.filter(patient => {
                return (
                    (patient.name && patient.name.toLowerCase().includes(searchTerm)) ||
                    (patient.email && patient.email.toLowerCase().includes(searchTerm)) ||
                    (patient.phone && patient.phone.toLowerCase().includes(searchTerm))
                );
            });
            currentPage = 1;
            renderTable();
            updatePagination();
        }

        function sortTable(columnIndex) {
            if (sortColumn === columnIndex) {
                sortDirection *= -1;
            } else {
                sortDirection = 1;
            }
            sortColumn = columnIndex;

            patientsData.sort((a, b) => {
                let aValue, bValue;
                switch (columnIndex) {
                    case 0: // Name
                        aValue = a.name || '';
                        bValue = b.name || '';
                        break;
                    case 1: // Email
                        aValue = a.email || '';
                        bValue = b.email || '';
                        break;
                    case 2: // Phone
                        aValue = a.phone || '';
                        bValue = b.phone || '';
                        break;
                    default:
                        return 0;
                }
                if (aValue < bValue) return -1 * sortDirection;
                if (aValue > bValue) return 1 * sortDirection;
                return 0;
            });

            currentPage = 1;
            renderTable();
            updateSortIndicators(columnIndex);
            updatePagination();
        }

        function renderTable() {
            const tbody = document.getElementById('patientsBody');
            tbody.innerHTML = '';

            const start = (currentPage - 1) * ITEMS_PER_PAGE;
            const end = start + ITEMS_PER_PAGE;
            const paginatedPatients = patientsData.slice(start, end);

            if (paginatedPatients.length === 0 && currentPage === 1) {
                tbody.innerHTML = '<tr><td colspan="4" style="text-align: center;">No patients found.</td></tr>';
                return;
            }

            paginatedPatients.forEach(patient => {
                const row = document.createElement('tr');
                row.dataset.id = patient.id;
                row.innerHTML = `
                    <td><input type="text" id="name-${patient.id}" value="${patient.name}" disabled required /></td>
                    <td><input type="email" id="email-${patient.id}" value="${patient.email}" disabled required /></td>
                    <td><input type="tel" id="phone-${patient.id}" value="${patient.phone}" disabled required /></td>
                    <td>
                        <button class="edit-btn" data-id="${patient.id}">Edit</button>
                        <button class="save-btn" data-id="${patient.id}">Save</button>
                        <button class="delete-btn" data-id="${patient.id}">Delete</button>
                    </td>
                `;
                tbody.appendChild(row);
            });

            attachEventListeners();
        }

        function updateSortIndicators(columnIndex) {
            const headers = document.querySelectorAll('#patientsTable th');
            headers.forEach((th, index) => {
                th.classList.remove('sort-asc', 'sort-desc');
                if (index === columnIndex) {
                    th.classList.add(sortDirection === 1 ? 'sort-asc' : 'sort-desc');
                }
            });
        }

        function changePage(delta) {
            const totalPages = Math.ceil(patientsData.length / ITEMS_PER_PAGE);
            currentPage += delta;
            if (currentPage < 1) currentPage = 1;
            if (currentPage > totalPages) currentPage = totalPages;
            renderTable();
            updatePagination();
        }

        function updatePagination() {
            const totalPages = Math.ceil(patientsData.length / ITEMS_PER_PAGE);
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const pageInfo = document.getElementById('pageInfo');

            prevBtn.disabled = currentPage === 1;
            nextBtn.disabled = currentPage === totalPages || totalPages === 0;
            pageInfo.textContent = `Page ${currentPage} of ${totalPages || 1}`;
        }

        function attachEventListeners() {
            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const id = e.target.dataset.id;
                    const row = e.target.closest('tr');
                    const inputs = row.querySelectorAll('input');
                    const saveBtn = row.querySelector('.save-btn');
                    inputs.forEach(input => input.disabled = false);
                    e.target.style.display = 'none';
                    saveBtn.style.display = 'inline-block';
                });
            });

            document.querySelectorAll('.save-btn').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const id = e.target.dataset.id;
                    const row = e.target.closest('tr');
                    const name = row.querySelector(`#name-${id}`).value.trim();
                    const email = row.querySelector(`#email-${id}`).value.trim();
                    const phone = row.querySelector(`#phone-${id}`).value.trim();

                    if (!name || !email || !phone) {
                        alert('All fields are required.');
                        return;
                    }
                    if (!/^\d{10,}$/.test(phone)) {
                        alert('Please enter a valid phone number (at least 10 digits).');
                        return;
                    }
                    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
                        alert('Please enter a valid email address.');
                        return;
                    }

                    try {
                        const response = await fetch(`/patients/${id}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ name, email, phone }),
                        });

                        if (response.ok) {
                            const inputs = row.querySelectorAll('input');
                            const editBtn = row.querySelector('.edit-btn');
                            inputs.forEach(input => input.disabled = true);
                            e.target.style.display = 'none';
                            editBtn.style.display = 'inline-block';
                            const patientIndex = patientsData.findIndex(p => p.id === id);
                            patientsData[patientIndex] = { id, name, email, phone };
                            originalPatients = originalPatients.map(p => p.id === id ? { id, name, email, phone } : p);
                            alert('Patient updated successfully!');
                        } else {
                            const errorText = await response.text();
                            alert('Failed to update patient: ' + errorText);
                        }
                    } catch (error) {
                        console.error('Error updating patient:', error);
                        alert('An error occurred. Please try again.');
                    }
                });
            });

            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const id = e.target.dataset.id;
                    const row = e.target.closest('tr');

                    if (confirm('Are you sure you want to delete this patient?')) {
                        try {
                            const response = await fetch(`/patients/${id}`, {
                                method: 'DELETE',
                                headers: { 'Content-Type': 'application/json' },
                            });

                            if (response.ok) {
                                patientsData = patientsData.filter(p => p.id !== id);
                                originalPatients = originalPatients.filter(p => p.id !== id);
                                renderTable();
                                updatePagination();
                                alert('Patient deleted successfully!');
                            } else {
                                const errorText = await response.text();
                                alert('Failed to delete patient: ' + errorText);
                            }
                        } catch (error) {
                            console.error('Error deleting patient:', error);
                            alert('An error occurred. Please try again.');
                        }
                    }
                });
            });
        }

        // Initial render
        renderTable();
        updatePagination();
    </script>
    <%- include('../../partials/_scripts') %>
    <%- include('../../partials/_footer') %>