<!DOCTYPE html>
<html lang="en">

<head>
    <title>All Organizations - MediTrack</title>
    <%- include('../../partials/_header') %>
    <%- include('../../partials/_styles') %>
    <style>
        .form-container {
            background: rgba(255, 255, 255, 0.9);
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            max-width: 1200px;
            width: 100%;
            margin: 0 auto;
        }

        .form-container h1 {
            font-size: 2rem;
            margin-bottom: 25px;
            text-align: center;
            color: #333;
        }

        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .organizations-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 1em;
        }

        .organizations-table th,
        .organizations-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .organizations-table th {
            background: #f5f5f5;
            font-weight: bold;
            color: #444;
            cursor: pointer;
            user-select: none;
        }

        .organizations-table th:hover {
            background: #e9ecef;
        }

        .organizations-table th::after {
            content: ' ↕';
            font-size: 0.9rem;
            color: #888;
            margin-left: 5px;
        }

        .organizations-table th.sort-asc::after {
            content: ' ↑';
            color: #333;
        }

        .organizations-table th.sort-desc::after {
            content: ' ↓';
            color: #333;
        }

        .organizations-table th:last-child::after {
            content: '';
        }

        .organizations-table td {
            background: #fafafa;
        }

        .organizations-table input,
        .organizations-table textarea {
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ccc;
            font-size: 1em;
            width: 100%;
            box-sizing: border-box;
        }

        .organizations-table textarea {
            resize: vertical;
            min-height: 50px;
        }

        .organizations-table input:disabled,
        .organizations-table textarea:disabled {
            background: #e9ecef;
            color: #666;
            border: none;
        }

        .organizations-table .edit-btn,
        .organizations-table .save-btn,
        .organizations-table .delete-btn,
        .add-organization-btn {
            background: #3498db;
            color: white;
            padding: 6px 12px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em;
            transition: background 0.3s ease;
            margin-right: 5px;
        }

        .add-organization-btn:hover {
            background: #2980b9;
        }

        .organizations-table .save-btn {
            background: #2ecc71;
            display: none;
        }

        .organizations-table .delete-btn {
            background: #e74c3c;
        }

        .organizations-table .edit-btn:hover {
            background: #2980b9;
        }

        .organizations-table .save-btn:hover {
            background: #27ae60;
        }

        .organizations-table .delete-btn:hover {
            background: #c0392b;
        }

        @media (max-width: 768px) {
            .organizations-table {
                font-size: 0.9em;
            }

            .organizations-table th,
            .organizations-table td {
                padding: 8px;
            }

            .header-container {
                flex-direction: column;
                gap: 10px;
            }
        }

        .error-message {
            color: #e74c3c;
            text-align: center;
            margin-bottom: 20px;
        }
    </style>
</head>

<body>
    <%- include('../../partials/_sidebar') %>
    <%- include('../../partials/_auth') %>

    <!-- Main Content -->
    <div class="main-content">
        <div class="form-container">
            <div class="header-container">
                <h1>All Organizations</h1>
                <button class="add-organization-btn" onclick="window.location.href='/add-organization'">Add
                    Organization</button>
            </div>
            <% if (typeof error !== 'undefined' && error) { %>
            <p class="error-message"><%= error %></p>
            <% } %>
            <table class="organizations-table" id="organizationsTable">
                <thead>
                    <tr>
                        <th onclick="sortTable(0)">Name</th>
                        <th onclick="sortTable(1)">Description</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="organizationsBody">
                    <% if (organizations && organizations.length > 0) { %>
                    <% organizations.forEach(org => { %>
                    <tr data-id="<%= org.organizationId %>">
                        <td>
                            <input type="text" id="name-<%= org.organizationId %>" value="<%= org.name %>" disabled
                                required />
                        </td>
                        <td>
                            <textarea id="description-<%= org.organizationId %>"
                                disabled><%= org.description %></textarea>
                        </td>
                        <td>
                            <button class="edit-btn" data-id="<%= org.organizationId %>">Edit</button>
                            <button class="save-btn" data-id="<%= org.organizationId %>">Save</button>
                            <button class="delete-btn" data-id="<%= org.organizationId %>">Delete</button>
                        </td>
                    </tr>
                    <% }) %>
                    <% } else { %>
                    <tr>
                        <td colspan="4" style="text-align: center;">No organizations found.</td>
                    </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>

    <script>
        let organizationsData = <% - JSON.stringify(organizations || []) %>;
        let sortColumn = -1;
        let sortDirection = 1;

        function sortTable(columnIndex) {
            if (sortColumn === columnIndex) {
                sortDirection *= -1;
            } else {
                sortDirection = 1;
            }
            sortColumn = columnIndex;

            organizationsData.sort((a, b) => {
                let aValue, bValue;
                switch (columnIndex) {
                    case 0: // Name
                        aValue = a.name || '';
                        bValue = b.name || '';
                        break;
                    case 1: // Description
                        aValue = a.description || '';
                        bValue = b.description || '';
                        break;
                    default:
                        return 0;
                }
                if (aValue < bValue) return -1 * sortDirection;
                if (aValue > bValue) return 1 * sortDirection;
                return 0;
            });

            renderTable();
            updateSortIndicators(columnIndex);
        }

        function renderTable() {
            const tbody = document.getElementById('organizationsBody');
            tbody.innerHTML = '';

            if (organizationsData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="4" style="text-align: center;">No organizations found.</td></tr>';
                return;
            }

            organizationsData.forEach(org => {
                const row = document.createElement('tr');
                row.dataset.id = org.organizationId;
                row.innerHTML = `
                    <td><input type="text" id="name-${org.organizationId}" value="${org.name}" disabled required /></td>
                    <td><textarea id="description-${org.organizationId}" disabled>${org.description}</textarea></td>
                    <td>
                        <button class="edit-btn" data-id="${org.organizationId}">Edit</button>
                        <button class="save-btn" data-id="${org.organizationId}">Save</button>
                        <button class="delete-btn" data-id="${org.organizationId}">Delete</button>
                    </td>
                `;
                tbody.appendChild(row);
            });

            attachEventListeners();
        }

        function updateSortIndicators(columnIndex) {
            const headers = document.querySelectorAll('#organizationsTable th');
            headers.forEach((th, index) => {
                th.classList.remove('sort-asc', 'sort-desc');
                if (index === columnIndex) {
                    th.classList.add(sortDirection === 1 ? 'sort-asc' : 'sort-desc');
                }
            });
        }

        function attachEventListeners() {
            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const id = e.target.dataset.id;
                    const row = e.target.closest('tr');
                    const inputs = row.querySelectorAll('input, textarea');
                    const saveBtn = row.querySelector('.save-btn');
                    inputs.forEach(input => input.disabled = false);
                    e.target.style.display = 'none';
                    saveBtn.style.display = 'inline-block';
                });
            });

            document.querySelectorAll('.save-btn').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const id = e.target.dataset.id;
                    const row = e.target.closest('tr');
                    const name = row.querySelector(`#name-${id}`).value.trim();
                    const description = row.querySelector(`#description-${id}`).value.trim();

                    if (!name) {
                        alert('Name is required.');
                        return;
                    }

                    try {
                        const response = await fetch(`/organization/${id}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ name, description })
                        });

                        if (response.ok) {
                            const inputs = row.querySelectorAll('input, textarea');
                            const editBtn = row.querySelector('.edit-btn');
                            inputs.forEach(input => input.disabled = true);
                            e.target.style.display = 'none';
                            editBtn.style.display = 'inline-block';
                            const orgIndex = organizationsData.findIndex(o => o.organizationId === id);
                            organizationsData[orgIndex] = { ...organizationsData[orgIndex], name, description };
                            alert('Organization updated successfully!');
                        } else {
                            const errorText = await response.text();
                            alert('Failed to update organization: ' + errorText);
                        }
                    } catch (error) {
                        console.error('Error updating organization:', error);
                        alert('An error occurred. Please try again.');
                    }
                });
            });

            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const id = e.target.dataset.id;
                    const row = e.target.closest('tr');

                    if (confirm('Are you sure you want to delete this organization?')) {
                        try {
                            const response = await fetch(`/organization/${id}`, {
                                method: 'DELETE',
                                headers: { 'Content-Type': 'application/json' }
                            });

                            if (response.ok) {
                                organizationsData = organizationsData.filter(o => o.organizationId !== id);
                                row.remove();
                                if (organizationsData.length === 0) renderTable();
                                alert('Organization deleted successfully!');
                            } else {
                                const errorText = await response.text();
                                alert('Failed to delete organization: ' + errorText);
                            }
                        } catch (error) {
                            console.error('Error deleting organization:', error);
                            alert('An error occurred. Please try again.');
                        }
                    }
                });
            });
        }

        attachEventListeners();
    </script>
    <%- include('../../partials/_scripts') %>
</body>

</html>